number main(number argc, symbol* argv[]) begin
    help();
    text filec;
    text lpl;
    text cpp;
    if (argc == 1) begin
        display "Enter path to .lpl file: ";
        lpl = ask();
    end
    else
        lpl = argv[1];
    filec = file::fileGetContents(lpl);
    cpp = "#include <iostream>\n#include <string>\n#include <fstream>\n#include <Windows.h>\n#include <conio.h>\n#include <vector>\n#include <direct.h>\n\nnamespace file\n{\n\tstd::string fileGetContents(std::string file_path) {\n\t\tstd::ifstream content(file_path);\n\t\tstd::string contentLINE;\n\t\tstd::string contentRETURN;\n\t\twhile (std::getline(content, contentLINE)) {\n\t\t\tcontentRETURN += contentLINE + \"\\n\";\n\t\t}\n\t\tcontent.close();\n\t\treturn contentRETURN;\n\t}\n\n\tvoid filePutContents(std::string file_path, std::string file_contents) {\n\t\tstd::ofstream fileaddc(file_path);\n\t\tfileaddc << file_contents;\n\t\tfileaddc.close();\n\t}\n\n\tvoid fileAddContents(std::string file_path, std::string append_contents) {\n\t\tfilePutContents(file_path, fileGetContents(file_path) + append_contents);\n\t}\n};\n\nnamespace convert\n{\n\tstd::string number_to_text(int num) {\n\t\treturn std::to_string(num);\n\t}\n\n\tint text_to_number(std::string text) {\n\t\treturn std::stoi(text);\n\t}\n\n\tchar number_to_symbol(int num) {\n\t\treturn static_cast<char>(num);\n\t}\n\n\tint symbol_to_number(char sym) {\n\t\treturn static_cast<int>(sym);\n\t}\n\n\tstd::string symbol_to_text(char sym) {\n\t\treturn std::string({sym});\n\t}\n};\n\nstd::string ask() {\n\tstd::string stirngask;\n\tstd::getline(std::cin, stirngask);\n\treturn stirngask;\n}\n\nstd::vector<std::string> explode(char separator, std::string text) {\n\tint i = 0;\n\tstd::vector<std::string> result;\n\tstd::string element = \"\";\n\twhile (i < text.length()) {\n\t\tif (text[i] == separator) {\n\t\t\tresult.push_back(element);\n\t\t\telement = \"\";\n\t\t}\n\t\telse if (i == (text.length() - 1)) {\n\t\t\telement += text[i];\n\t\t\tresult.push_back(element);\n\t\t\telement = \"\";\n\t\t}\n\t\telse {\n\t\t\telement += text[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nnamespace os {\n\tstd::string getPath() {\n\t\tchar buffer[MAX_PATH];\n\t\tDWORD len = GetCurrentDirectoryA(MAX_PATH, buffer);\n\t\tif (len == 0) return \"\";\n\t\treturn std::string(buffer, len);\n\t}\n\n\tstd::vector<std::string> listDir() {\n\t\tstd::vector<std::string> files;\n\t\tWIN32_FIND_DATAA fd;\n\t\tHANDLE hFind = FindFirstFileA(\"*\", &fd);\n\n\t\tif (hFind != INVALID_HANDLE_VALUE) {\n\t\t\tdo {\n\t\t\t\tstd::string name = fd.cFileName;\n\t\t\t\tif (name != \".\" && name != \"..\") {\n\t\t\t\t\tfiles.push_back(name);\n\t\t\t\t}\n\t\t\t} while (FindNextFileA(hFind, &fd));\n\t\t\tFindClose(hFind);\n\t\t}\n\n\t\treturn files;\n\t}\n\n\tvoid deleteFile(std::string filename) {\n\t\tDeleteFileA(filename.c_str());\n\t}\n\n\tvoid deleteFolder(std::string foldername) {\n\t\tRemoveDirectoryA(foldername.c_str());\n\t}\n\n\tvoid createFolder(std::string foldername) {\n\t\tCreateDirectoryA(foldername.c_str(), NULL);\n\t}\n\n\tvoid changeDir(std::string foldername) {\n\t\t_chdir(foldername.c_str());\n\t}\n\n\tvoid cmdCommand(std::string command) {\n\t\tsystem(command.c_str());\n\t}\n\n\tvoid sleep(int milliseconds) {\n\t\tSleep(milliseconds);\n\t}\n\n\tvoid shutdown() {\n\t\tsystem(\"shutdown /s /t 0\");\n\t}\n\n\tvoid reboot() {\n\t\tsystem(\"shutdown /r /t 0\");\n\t}\n};\n\nnamespace ConsoleColor {\n\tint BLACK = 0;\n\tint BLUE = 1;\n\tint GREEN = 2;\n\tint CYAN = 3;\n\tint RED = 4;\n\tint MAGENTA = 5;\n\tint BROWN = 6;\n\tint LIGHTGRAY = 7;\n\tint DARKGRAY = 8;\n\tint LIGHTBLUE = 9;\n\tint LIGHTGREEN = 10;\n\tint LIGHTCYAN = 11;\n\tint LIGHTRED = 12;\n\tint LIGHTMAGENTA = 13;\n\tint YELLOW = 14;\n\tint WHITE = 15;\n};\n\nvoid setConsoleColor(int textColor, int backgroundColor = ConsoleColor::BLACK) {\n\tHANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);\n\tSetConsoleTextAttribute(hConsole, (backgroundColor << 4) | textColor);\n}\n\nint getCharCode() {\n\treturn _getch();\n}\n\nvoid help() {\n\tstd::cout << \"The LPL is just a simplified C++.\" << std::endl;\n\tstd::cout << \"namespace file\" << std::endl;\n\tstd::cout << \"|-   `text file::fileGetContents(text file_path)` = reads text from a file.\" << std::endl;\n\tstd::cout << \"|-   `void file::filePutContents(text file_path, text file_contents)` = writes text from a file.\" << std::endl;\n\tstd::cout << \"|-   `void file::fileAddContents(text file_path, text append_contents)` = appends text to a file.\" << std::endl;\n\tstd::cout << \"namespace convert\" << std::endl;\n\tstd::cout << \"|-   `text convert::number_to_text(number num)` = converts a number to text (123 -> \\\"123\\\").\" << std::endl;\n\tstd::cout << \"|-   `number convert::text_to_number(text text)` = converts a text to number (\\\"123\\\" -> 123).\" << std::endl;\n\tstd::cout << \"|-   `symbol convert::number_to_symbol(number num)` = converts a number to symbol by number code (97 -> 'a').\" << std::endl;\n\tstd::cout << \"|-   `number convert::symbol_to_number(symbol sym)` = converts a symbol to number by symbol code ('a' -> 97).\" << std::endl;\n\tstd::cout << \"|-   `text convert::symbol_to_text(symbol sym)` = converts a symbol to text ('a' -> \\\"a\\\").\" << std::endl;\n\tstd::cout << \"namespace os\" << std::endl;\n\tstd::cout << \"|-   `text os::getPath()` = get current directory.\" << std::endl;\n\tstd::cout << \"|-   `list<text> os::listDir()` = get list of directiores and files.\" << std::endl;\n\tstd::cout << \"|-   `void os::deleteFile(text filename)` = deletes file.\" << std::endl;\n\tstd::cout << \"|-   `void os::deleteFolder(text foldername)` = deletes directory.\" << std::endl;\n\tstd::cout << \"|-   `void os::createFolder(text foldername)` = creates directory.\" << std::endl;\n\tstd::cout << \"|-   `void os::changeDir(text foldername)` = creates directory.\" << std::endl;\n\tstd::cout << \"|-   `void os::cmdCommand(text command)` = runs a command line command (IMPORTANT! The \\\"cd\\\" command does not work, use os.changeDir).\" << std::endl;\n\tstd::cout << \"|-   `void os::sleep(number milliseconds)` = pauses the program for the specified number of milliseconds.\" << std::endl;\n\tstd::cout << \"|-   `void os::shutdown()` = shutdowns the computer.\" << std::endl;\n\tstd::cout << \"|-   `void os::reboot()` = reboots the computer.\" << std::endl;\n\tstd::cout << \"namespace ConsoleColor\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::BLACK` = 0\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::BLUE` = 1\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::GREEN` = 2\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::CYAN` = 3\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::RED` = 4\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::MAGENTA` = 5\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::BROWN` = 6\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::LIGHTGRAY` = 7\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::DARKGRAY` = 8\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::LIGHTBLUE` = 9\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::LIGHTGREEN` = 10\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::LIGHTCYAN` = 11\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::LIGHTRED` = 12\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::LIGHTMAGENTA` = 13\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::YELLOW` = 14\" << std::endl;\n\tstd::cout << \"|-   `ConsoleColor::WHITE` = 15\" << std::endl;\n\tstd::cout << \"`text ask()` = accepts text entered by the user.\" << std::endl;\n\tstd::cout << \"`list<text> explode(symbol separator, text text)` = splits the text into list<text>.\" << std::endl;\n\tstd::cout << \"`void setConsoleColor(number textColor, number backgroundColor` = ConsoleColor.BLACK)` = changes the color of the console.\" << std::endl;\n\tstd::cout << \"`number getCharCode()` = waits for a key to be pressed and returns its code, just like _getch() does.\" << std::endl;\n\tstd::cout << \"`void help()` = prints a list of methods and keywords to the console.\" << std::endl;\n\tstd::cout << \"`number getElementIndex(list<typename> l, typename e)` = returns the index of an element in a list.\" << std::endl;\n\tstd::cout << \"`typename::iterator _Begin(typename& l)` = returns a list or text and etc. iterator, like typename.begin().\" << std::endl;\n\tstd::cout << \"`typename::iterator _End(typename& l)` = returns a list or text and etc. iterator, like typename.end().\" << std::endl;\n\tstd::cout << std::endl << \"-- 21 methods --\" << std::endl << std::endl;\n\tstd::cout << \"`display ?` = prints text to the console.\" << std::endl;\n\tstd::cout << \"`number` = a variable type that stores in 32-bit a number from -2147483644 to 2147483648 if you add unsigned in front of it, it will also be from 0 to 4294967295.\" << std::endl;\n\tstd::cout << \"`text` = a variable type that stores text, the text must be in double quotes (\\\"Hello, world!\\\").\" << std::endl;\n\tstd::cout << \"`symbol` = a variable type that contains a single character is protected by apostrophes ('a').\" << std::endl;\n\tstd::cout << \"`list<typename>` = a list of objects (variables), you can learn more about them as vector in C++: https://learn.microsoft.com/en-us/cpp/standard-library/vector-class?view=msvc-170 (IMPORTANT: do not use list<typename>.find(), list<typename>.begin() and list<typename>.end(), we recommend using a `number getElementIndex(list<typename> l, typename e)`, `typename::iterator _Begin(typename& l)` and `typename::iterator _End(typename& l)`).\" << std::endl;\n\tstd::cout << \"`begin` = opens a block of code.\" << std::endl;\n\tstd::cout << \"`end` = closes a block of code.\" << std::endl;\n\tstd::cout << std::endl << \"-- 7 keywords --\" << std::endl << std::endl;\n}\n\ntemplate<typename LT>\nint getElementIndex(std::vector<LT> l, LT e) {\n\tint i = 0;\n\twhile (l[i] != e) {\n\t\ti++;\n\t\tif (i >= l.size())\n\t\t\treturn -1;\n\t}\n\treturn i;\n}\n\ntemplate<typename LT>\nauto _Begin(LT& l) {\n\treturn l.begin();\n}\n\ntemplate<typename LT>\nauto _End(LT& l) {\n\treturn l.end();\n}\n\n#define display std::cout << \n#define number int\n#define text std::string\n#define symbol char\n#define list std::vector\n#define begin { \n#define end }\n\n" + filec;
    file::filePutContents(lpl.substr(0, lpl.length() - 4) + ".cpp", cpp);
end
