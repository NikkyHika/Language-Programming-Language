number main(int argc, char* argv[]) begin
    help();
    text filec;
    text lpl;
    text cpp;
    if (argc == 1) begin
        display "Enter path to .lpl file: ";
        lpl = ask();
    end
    else
        lpl = argv[1];
    filec = file.fileGetContents(lpl);
    cpp = "#include <iostream>\n#include <string>\n#include <fstream>\n#include <Windows.h>\n#include <conio.h>\n#include <vector>\n#include <direct.h>\n\nstruct file_functions\n{\n    std::string fileGetContents(std::string file_path) {\n        std::ifstream content(file_path);\n        std::string contentLINE;\n        std::string contentRETURN;\n        while (std::getline(content, contentLINE)) {\n            contentRETURN += contentLINE + \"\\n\";\n        }\n        content.close();\n        return contentRETURN;\n    }\n\n    void filePutContents(std::string file_path, std::string file_contents) {\n        std::ofstream fileaddc(file_path);\n        fileaddc << file_contents;\n        fileaddc.close();\n    }\n\n    void fileAddContents(std::string file_path, std::string append_contents) {\n        filePutContents(file_path, fileGetContents(file_path) + append_contents);\n    }\n};\n\nstruct convert_functions\n{\n    std::string number_to_text(int num) {\n        return std::to_string(num);\n    }\n\n    int text_to_number(std::string text) {\n        return std::stoi(text);\n    }\n\n    char number_to_symbol(int num) {\n        return static_cast<char>(num);\n    }\n\n    int symbol_to_number(char sym) {\n        return static_cast<int>(sym);\n    }\n\n    std::string symbol_to_text(char sym) {\n        return std::string({sym});\n    }\n};\n\nfile_functions file;\nconvert_functions convert;\n\nstd::string ask() {\n    std::string stirngask;\n    std::getline(std::cin, stirngask);\n    return stirngask;\n}\n\nstd::vector<std::string> explode(char separator, std::string text) {\n    int i = 0;\n    std::vector<std::string> result;\n    std::string element = \"\";\n    while (i < text.length()) {\n        if (text[i] == separator) {\n            result.push_back(element);\n            element = \"\";\n        }\n        else if (i == (text.length() - 1)) {\n            element += text[i];\n            result.push_back(element);\n            element = \"\";\n        }\n        else {\n            element += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nstruct os_functions {\n    std::string getPath() {\n        char buffer[MAX_PATH];\n        DWORD len = GetCurrentDirectoryA(MAX_PATH, buffer);\n        if (len == 0) return \"\";\n        return std::string(buffer, len);\n    }\n\n    std::vector<std::string> listDir() {\n        std::vector<std::string> files;\n        WIN32_FIND_DATAA fd;\n        HANDLE hFind = FindFirstFileA(\"*\", &fd);\n\n        if (hFind != INVALID_HANDLE_VALUE) {\n            do {\n                std::string name = fd.cFileName;\n                if (name != \".\" && name != \"..\") {\n                    files.push_back(name);\n                }\n            } while (FindNextFileA(hFind, &fd));\n            FindClose(hFind);\n        }\n\n        return files;\n    }\n\n    void deleteFile(std::string filename) {\n        system((\"del \" + filename).c_str());\n    }\n\n    void deleteFolder(std::string foldername) {\n        system((\"rmdir /s /q \" + foldername).c_str());\n    }\n\n    void createFolder(std::string foldername) {\n        //CreateDirectoryA(foldername.c_str());\n        system((\"mkdir \" + foldername).c_str());\n    }\n\n    void changeDir(std::string foldername) {\n        _chdir(foldername.c_str());\n    }\n\n    void cmdCommand(std::string command) {\n        system(command.c_str());\n    }\n};\n\nstruct ConsoleColor_lllist {\n    int BLACK = 0;\n    int BLUE = 1;\n    int GREEN = 2;\n    int CYAN = 3;\n    int RED = 4;\n    int MAGENTA = 5;\n    int BROWN = 6;\n    int LIGHTGRAY = 7;\n    int DARKGRAY = 8;\n    int LIGHTBLUE = 9;\n    int LIGHTGREEN = 10;\n    int LIGHTCYAN = 11;\n    int LIGHTRED = 12;\n    int LIGHTMAGENTA = 13;\n    int YELLOW = 14;\n    int WHITE = 15;\n};\n\nConsoleColor_lllist ConsoleColor;\nos_functions os;\n\nvoid setConsoleColor(int textColor, int backgroundColor = ConsoleColor.BLACK) {\n    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);\n    SetConsoleTextAttribute(hConsole, (backgroundColor << 4) | textColor);\n}\n\nint getCharCode() {\n    return _getch();\n}\n\nvoid help() {\n    std::cout << \"The LPL is just a simplified C++.\" << std::endl;\n    std::cout << \"structure file\" << std::endl;\n    std::cout << \"|-   `text file.fileGetContents(text file_path)` = reads text from a file.\" << std::endl;\n    std::cout << \"|-   `void file.filePutContents(text file_path, text file_contents)` = writes text from a file.\" << std::endl;\n    std::cout << \"|-   `void file.fileAddContents(text file_path, text append_contents)` = appends text to a file.\" << std::endl;\n    std::cout << \"structure convert\" << std::endl;\n    std::cout << \"|-   `text convert.number_to_text(number num)` = converts a number to text (123 -> \\\"123\\\").\" << std::endl;\n    std::cout << \"|-   `number convert.text_to_number(text text)` = converts a text to number (\\\"123\\\" -> 123).\" << std::endl;\n    std::cout << \"|-   `symbol convert.number_to_symbol(number num)` = converts a number to symbol by number code (97 -> 'a').\" << std::endl;\n    std::cout << \"|-   `number convert.symbol_to_number(symbol sym)` = converts a symbol to number by symbol code ('a' -> 97).\" << std::endl;\n    std::cout << \"|-   `text convert.symbol_to_text(symbol sym)` = converts a symbol to text ('a' -> \\\"a\\\").\" << std::endl;\n    std::cout << \"structure os\" << std::endl;\n    std::cout << \"|-   `text os.getPath()` = get current directory.\" << std::endl;\n    std::cout << \"|-   `list<text> os.listDir()` = get list of directiores and files.\" << std::endl;\n    std::cout << \"|-   `void os.deleteFile(text filename)` = deletes file.\" << std::endl;\n    std::cout << \"|-   `void os.deleteFolder(text foldername)` = deletes directory.\" << std::endl;\n    std::cout << \"|-   `void os.createFolder(text foldername)` = creates directory.\" << std::endl;\n    std::cout << \"|-   `void os.changeDir(text foldername)` = creates directory.\" << std::endl;\n    std::cout << \"|-   `void os.cmdCommand(text command)` = runs a command line command (IMPORTANT! The \\\"cd\\\" command does not work, use os.changeDir).\" << std::endl;\n    std::cout << \"structure ConsoleColor\" << std::endl;\n    std::cout << \"|-   `number BLACK = 0`\" << std::endl;\n    std::cout << \"|-   `number BLUE = 1`\" << std::endl;\n    std::cout << \"|-   `number GREEN = 2`\" << std::endl;\n    std::cout << \"|-   `number CYAN = 3`\" << std::endl;\n    std::cout << \"|-   `number RED = 4`\" << std::endl;\n    std::cout << \"|-   `number MAGENTA = 5`\" << std::endl;\n    std::cout << \"|-   `number BROWN = 6`\" << std::endl;\n    std::cout << \"|-   `number LIGHTGRAY = 7`\" << std::endl;\n    std::cout << \"|-   `number DARKGRAY = 8`\" << std::endl;\n    std::cout << \"|-   `number LIGHTBLUE = 9`\" << std::endl;\n    std::cout << \"|-   `number LIGHTGREEN = 10`\" << std::endl;\n    std::cout << \"|-   `number LIGHTCYAN = 11`\" << std::endl;\n    std::cout << \"|-   `number LIGHTRED = 12`\" << std::endl;\n    std::cout << \"|-   `number LIGHTMAGENTA = 13`\" << std::endl;\n    std::cout << \"|-   `number YELLOW = 14`\" << std::endl;\n    std::cout << \"|-   `number WHITE = 15`\" << std::endl;\n    std::cout << \"`text ask()` = accepts text entered by the user.\" << std::endl;\n    std::cout << \"`list<text> explode(symbol separator, text text)` = splits the text into list<text>.\" << std::endl;\n    std::cout << \"`void setConsoleColor(number textColor, number backgroundColor` = ConsoleColor.BLACK)` = changes the color of the console.\" << std::endl;\n    std::cout << \"`number getCharCode()` = waits for a key to be pressed and returns its code, just like _getch() does.\" << std::endl;\n    std::cout << \"`void help()` = prints a list of methods and keywords to the console.\" << std::endl;\n    std::cout << \"`number getElementIndex(list<typename> l, typename e)` = returns the index of an element in a list.\" << std::endl;\n    std::cout << \"`list<typename>::iterator listBegin(list<typename>& l)` = returns a list iterator, like list<typename>.begin().\" << std::endl;\n    std::cout << \"`list<typename>::iterator listEnd(list<typename>& l)` = returns a list iterator, like list<typename>.end().\" << std::endl;\n    std::cout << std::endl << \"-- 21 methods --\" << std::endl << std::endl;\n    std::cout << \"`display ?` = prints text to the console.\" << std::endl;\n    std::cout << \"`number` = a variable type that stores in 32-bit a number from -2147483644 to 2147483648 if you add unsigned in front of it, it will also be from 0 to 4294967295.\" << std::endl;\n    std::cout << \"`text` = a variable type that stores text, the text must be in double quotes (\\\"Hello, world!\\\").\" << std::endl;\n    std::cout << \"`symbol` = a variable type that contains a single character is protected by apostrophes ('a').\" << std::endl;\n    std::cout << \"`list<typename>` = a list of objects (variables), you can learn more about them as vector in C++: https://learn.microsoft.com/en-us/cpp/standard-library/vector-class?view=msvc-170 (IMPORTANT: do not use list<typename>.find(), list<typename>.begin() and list<typename>.end(), we recommend using a `number getElementIndex(list<typename> l, typename e)`, `list<typename>::iterator listBegin(list<typename>& l)` and `list<typename>::iterator listEnd(list<typename>& l)`).\" << std::endl;\n    std::cout << \"`begin` = opens a block of code.\" << std::endl;\n    std::cout << \"`end` = closes a block of code.\" << std::endl;\n    std::cout << std::endl << \"-- 7 keywords --\" << std::endl << std::endl;\n}\n\ntemplate<typename LT>\nint getElementIndex(std::vector<LT> l, LT e) {\n    int i = 0; \n    while (l[i] != e) {\n        i++; \n        if (i >= l.size())\n            return -1;\n    }\n    return i;\n}\n\ntemplate<typename LT>\nauto listBegin(std::vector<LT>& l) {\n    return l.begin();\n}\n\ntemplate<typename LT>\nauto listEnd(std::vector<LT>& l) {\n    return l.end();\n}\n\n#define display std::cout << \n#define number int\n#define text std::string\n#define symbol char\n#define list std::vector\n#define begin { \n#define end }\n\n"+filec;
    file.filePutContents(lpl.substr(0, lpl.length() - 4) + ".cpp", cpp);
end
